
<script src="https://www.gstatic.com/firebasejs/8.5.0/firebase-app.js"></script>

<script src="https://www.gstatic.com/firebasejs/8.5.0/firebase-analytics.js"></script>

<script src="https://www.gstatic.com/firebasejs/8.5.0/firebase-database.js"></script>

<script>

    var firebaseConfig = {
        apiKey: "AIzaSyAId5U8P5nDEhytscOGupt7yymM9R0Gdsc",
        authDomain: "wildlife-monitoring-system.firebaseapp.com",
        databaseURL: "https://wildlife-monitoring-system-default-rtdb.asia-southeast1.firebasedatabase.app",
        projectId: "wildlife-monitoring-system",
        storageBucket: "wildlife-monitoring-system.appspot.com",
        messagingSenderId: "345584392239",
        appId: "1:345584392239:web:1588fc68d350da6ecc4eda",
        measurementId: "G-1MER911JKD"
    };
    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);
    firebase.analytics();
</script>

<div class="layout-px-spacing">

    <div class="row layout-top-spacing">
        <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 layout-spacing">
            <div class="row">
                <div class="col-lg-12 col-12 layout-spacing">
                    <div class="statbox widget box box-shadow">
                        <div class="widget-header">
                            <div class="row">
                                <div class="col-xl-12 col-md-12 col-sm-12 col-12">
                                    <h4></h4>
                                </div>
                            </div>
                        </div>
                        <div class="widget-content widget-content-area justify-pill">

                            <ul class="nav nav-pills mb-3 mt-3 justify-content-center" id="justify-center-pills-tab" role="tablist">
                                <li class="nav-item">
                                    <a class="nav-link active" id="justify-center-pills-home-tab" data-toggle="pill" href="#compare_behavior" role="tab" aria-controls="justify-center-pills-home" aria-selected="true">Compare Behavior</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="justify-center-pills-profile-tab" data-toggle="pill" href="#consumption_patterns" role="tab" aria-controls="justify-center-pills-profile" aria-selected="false">Consumption Patterns</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="justify-center-pills-contact-tab" data-toggle="pill" href="#rainfall_and_soil" role="tab" aria-controls="justify-center-pills-contact" aria-selected="false">Rainfall and Soil</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="justify-center-pills-contact-tab" data-toggle="pill" href="#waterbody_status" role="tab" aria-controls="justify-center-pills-contact" aria-selected="false">Waterbody Status</a>
                                </li>
                            </ul>

                            <div class="tab-content" id="justify-center-pills-tabContent">
                                <div class="tab-pane fade show active" id="compare_behavior" role="tabpanel" aria-labelledby="justify-center-pills-home-tab">
                                    <div class="row">
                                        <div class="col-lg-9">
                                            <div id="cbMap" style="height: 700px"></div>
                                            <br/>
                                        </div>
                                        <div class="col-lg-3">
                                            Select Date
                                            <div class="form-group mb-0">
                                                <input id="selectdate1" name="selectdate1" class="form-control flatpickr flatpickr-input active" type="text" placeholder="Select Date..">
                                            </div>
                                            <br/>
                                            Select Animal to Compare
                                            <div class="form-group mb-0">
                                                <select id="select_cb_1" class="form-control basic">
                                                   <option selected="selected">Terrestial Tracker 1</option>
                                                   <option>Terrestial Tracker 2</option>
                                                   <option>Marine Tracker</option>
                                                   <option>Aerial Tracker</option>
                                                </select>
                                            </div>

                                            Select Animal to Compare with
                                            <div class="form-group mb-0">
                                                <select id="select_cb_2" class="form-control basic">
                                                   <option selected="selected">Terrestial Tracker 1</option>
                                                   <option>Terrestial Tracker 2</option>
                                                   <option>Marine Tracker</option>
                                                   <option>Aerial Tracker</option>
                                                </select>
                                            </div>

                                        </div>
                                    </div>
                                </div>


                                <div class="tab-pane fade" id="consumption_patterns" role="tabpanel" aria-labelledby="justify-center-pills-profile-tab">
                                    <div class="row">
                                        <div class="col-lg-9">
                                            <div id="cpMap" style="height: 700px"></div>
                                            <br/>
                                        </div>
                                        <div class="col-lg-3">
                                            Select Date
                                            <div class="form-group mb-0">
                                                <input id="selectdate2" name="selectdate2" class="form-control flatpickr flatpickr-input active" type="text" placeholder="Select Date..">
                                            </div>
                                            <br/>
                                            Select Animal to observe consumption
                                            <div class="form-group mb-0">
                                                <select id="select_consumer" class="form-control basic">
                                                    <option selected="selected">Terrestial Tracker 1</option>
                                                    <option>Terrestial Tracker 2</option>
                                                    <option>Marine Tracker</option>
                                                    <option>Aerial Tracker</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="tab-pane fade" id="rainfall_and_soil" role="tabpanel" aria-labelledby="justify-center-pills-contact-tab">
                                    <div class="row">
                                        <div class="col-lg-9">
                                            <div id="simpleAreaChart" style="height: 200px;" class=""></div>
                                        </div>
                                        <div class="col-lg-3">
                                            <br/><br/>
                                            <div class="form-group mb-0">
                                                <input id="selectdate3" name="selectdate3" class="form-control flatpickr flatpickr-input active" type="text" placeholder="Select Date..">
                                            </div>
                                            <br/>
                                            <div class="form-group mb-0">
                                                <select id="cmbRSParameters" name="cmbRSParameters" class="form-control basic">
                                                    <option value="RF">Rainfall Frequency</option>
                                                    <option value="SS">Soil Saturation</option>
                                                    <option value="RP">Rainfall Proximity</option>
                                                </select>
                                            </div>
                                            <br/>
                                            <div class="form-group mb-0">
                                                <select id="cmbRSDevice" name="cmbRSDevice" class="form-control basic">
                                                    <option value="RG1">RG1</option>
                                                    <option value="RG2">RG2</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="tab-pane fade" id="waterbody_status" role="tabpanel" aria-labelledby="justify-center-pills-contact-tab">
                                    <div class="row">
                                        <div class="col-lg-9">
                                            <div id="simpleWSAreaChart" style="height: 200px;" class=""></div>
                                        </div>
                                        <div class="col-lg-3">
                                            <div class="form-group mb-0">
                                                <input id="selectdate4" name="selectdate4" class="form-control flatpickr flatpickr-input active" type="text" placeholder="Select Date..">
                                            </div>
                                            <br/>
                                            <div class="form-group mb-0">
                                                <select id="cmbWSParameters" name="cmbWSParameters" class="form-control basic">
                                                    <option value="WPH">Water PH Quality</option>
                                                    <option value="WTEMP">Water Temperature</option>
                                                </select>
                                            </div>
                                            <br/>
                                            <div class="form-group mb-0">
                                                <select id="cmbWSDevice" name="cmbWSDevice" class="form-control basic">
                                                    <option value="WB1">WB1</option>
                                                    <option value="WB2">WB2</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
            </div>
        </div>
    </div>
</div>

<script>

    let chartRSData;
    let chartRS = null;

    let chartWSData;
    let chartWS = null;

    function alert(message){
        swal({
            type: 'error',
            title: 'Oops...',
            text: message,
            footer: '',
            padding: '2em'
        })
    }

    function createRSChartData(date, type, device){

        let split_date= date.split(":");
        let year=split_date[0];
        let month= split_date[1];
        let day=split_date[2];

        if(month<10){
            month=month.split("0");
            month=month[1];
        }

        if(day<10){
            day=day.split("0");
            day=day[1];
        }
        newDate = year+":"+month+":"+day;

        let chartDataArray = [];

        let demoArrayY = [];
        let demoArrayX = [];
        let xLabel = "";

        firebase.database().ref().child('RG').child(device).orderByChild("date").equalTo(String(newDate)).once("value", function(snapshot) {
            if (snapshot.exists()) {
                snapshot.forEach((child) => {
                    if(type === "RF"){
                        chartDataArray.push(child.val().minutecount);
                        xLabel = "Rainfall Frequency";
                    }

                    if(type === "SS"){
                        chartDataArray.push(100-child.val().soildry);
                        xLabel = "Soil Saturation";
                    }

                    if(type === "RP"){
                        chartDataArray.push(100-child.val().weatherdry);
                        xLabel = "Rainfall Proximity";
                    }
                });

                let map = chartDataArray.reduce(function(prev, cur) {
                    prev[cur] = (prev[cur] || 0) + 1;
                    return prev;
                }, {});

                for (key in map) {
                    if (map.hasOwnProperty(key)) {
                        demoArrayX.push(key);
                        demoArrayY.push(Number(map[key]));
                    }
                }

                populateChart(demoArrayX, demoArrayY, xLabel);

            }
            else{
                console.log("There's no proper data");
                alert("There's no proper data.");
            }
        });
    }

    function createWSChartData(date, type, device){

        let split_date= date.split(":");
        let year=split_date[0];
        let month= split_date[1];
        let day=split_date[2];

        if(month<10){
            month=month.split("0");
            month=month[1];
        }

        if(day<10){
            day=day.split("0");
            day=day[1];
        }
        newDate = year+":"+month+":"+day;

        let chartDataArray = [];

        let demoArrayY = [];
        let demoArrayX = [];
        let xLabel = "";

        firebase.database().ref().child('WB').child(device).orderByChild("date").equalTo(String(newDate)).once("value", function(snapshot) {
            if (snapshot.exists()) {
                snapshot.forEach((child) => {
                    if(type === "WPH"){
                        let phValue=String(child.val().ph);
                        phValue=phValue.split(".");
                        let phInt= phValue[0];
                        let phFloat= phValue[1];
                        phFloat=phFloat.substr(0,2);
                        phValue=phInt+"."+phFloat;
                        phValue=parseFloat(phValue);
                        chartDataArray.push(phValue);
                        xLabel = "Water PH Quality";
                    }

                    if(type === "WTEMP"){
                        chartDataArray.push(child.val().temperature);
                        xLabel = "Water Temperature";
                    }

                });

                let map = chartDataArray.reduce(function(prev, cur) {
                    prev[cur] = (prev[cur] || 0) + 1;
                    return prev;
                }, {});

                console.log(map);

                for (key in map) {
                    if (map.hasOwnProperty(key)) {
                        demoArrayX.push(key);
                        demoArrayY.push(Number(map[key]).toPrecision(2));
                    }
                }

                populateWSChart(demoArrayX, demoArrayY, xLabel);

            }
            else{
                console.log("There's no proper data");
                alert("There's no proper data.");
            }
        });
    }

    function populateChart(xAxis, yAxis, xLabel){
        if(chartRS != null){
            chartRS.clear();
        }

        chartRSData = {
            chart: {
                height: 450,
                type: 'area',
                toolbar: {
                    show: false,
                }
            },
            dataLabels: {
                enabled: true
            },
            stroke: {
                curve: 'smooth'
            },
            series: [{
                name: 'Frequency',
                data: yAxis
            }],

            xaxis: {
                title: {
                    text: xLabel
                },
                type: 'category',
                categories: xAxis
            },
            yaxis: {
                title: {
                    text: "Frequency"
                }
            }
        }

        chartRS = new ApexCharts(
            document.querySelector("#simpleAreaChart"),
            chartRSData
        );


        chartRS.render();
    }

    function populateWSChart(xAxis, yAxis, xLabel){
        if(chartWS != null){
            chartWS.clear();
        }

        chartWSData = {
            chart: {
                height: 450,
                type: 'area',
                toolbar: {
                    show: false,
                }
            },
            dataLabels: {
                enabled: true
            },
            stroke: {
                curve: 'smooth'
            },
            series: [{
                name: 'Frequency',
                data: yAxis
            }],

            xaxis: {
                title: {
                    text: xLabel
                },
                type: 'category',
                categories: xAxis
            },
            yaxis: {
                title: {
                    text: "Frequency"
                }
            }
        }

        chartWS = new ApexCharts(
            document.querySelector("#simpleWSAreaChart"),
            chartWSData
        );


        chartWS.render();
    }

    function initMap(){
        //Start Div Compare Behavior Map//

        let mapCB = new google.maps.Map(document.getElementById("cbMap"), {
            center: { lat: 7.8731, lng: 80.7718 },
            zoom: 8,
            mapTypeId: 'satellite'
        });
        //End Div Compare Behavior Map//

        //Start Div Consumption Patterns Map//

        let mapCP = new google.maps.Map(document.getElementById("cpMap"), {
            center: { lat: 7.8731, lng: 80.7718 },
            zoom: 8,
            mapTypeId: 'satellite'
        });
        //End Div Consumption Patterns Map//x
    }

    window.processBehavior=function(){

        var dateSelected = document.getElementById('selectdate1').value;
        console.log(String(dateSelected));
        var animal1 = document.getElementById('select_cb_1').value;
        var animal2 = document.getElementById('select_cb_2').value;

        var trackerId1;
        var trackerId2;
        //set the trackercode to first param
        if(animal1=="Terrestial Tracker 1")
            trackerId1="TKT1";
        else if(animal1=="Terrestial Tracker 2")
            trackerId1="TKT2";
        else if(animal1=="Marine Tracker")
            trackerId1="TKM1";
        else if(animal1=="Aerial Tracker")
            trackerId1="TKA1";

        //set the trackercode to second param
        if(animal2=="Terrestial Tracker 1")
            trackerId2="TKT1";
        else if(animal2=="Terrestial Tracker 2")
            trackerId2="TKT2";
        else if(animal2=="Marine Tracker")
            trackerId2="TKM1";
        else if(animal2=="Aerial Tracker")
            trackerId2="TKA1";

        console.log(trackerId1);
        console.log(trackerId2);

        var splt= dateSelected.split(":");
        var year=splt[0];
        var month= splt[1];
        var day=splt[2];

        var historyLongArrayForCB=[];
        var historyLatArrayForCB=[];
        var longArrayForCB=[];
        var latArrayForCB=[];
        var locFrequency=[];
        var heatMapArrayForCB=[];
        var heatmapCB=null;

        var historyLongArrayForCB2=[];
        var historyLatArrayForCB2=[];
        var longArrayForCB2=[];
        var latArrayForCB2=[];
        var locFrequency2=[];
        var heatMapArrayForCB2=[];
        var heatmapCB2=null;

        const gradient = [
            "rgba(0, 255, 255, 0)",
            "rgba(0, 255, 255, 1)",
            "rgba(0, 191, 255, 1)",
            "rgba(0, 127, 255, 1)",
            "rgba(0, 63, 255, 1)",
            "rgba(0, 0, 255, 1)",
            "rgba(0, 0, 223, 1)",
            "rgba(0, 0, 191, 1)",
            "rgba(0, 0, 159, 1)",
            "rgba(0, 0, 127, 1)",
            "rgba(63, 0, 91, 1)",
            "rgba(127, 0, 63, 1)",
            "rgba(191, 0, 31, 1)",
            "rgba(255, 0, 0, 1)",
        ];

        if(month<10){
            month=month.split("0");
            month=month[1];
        }

        if(day<10){
            day=day.split("0");
            day=day[1];
        }
        dateSelected=year+":"+month+":"+day;
        console.log(dateSelected);

        firebase.database().ref().child('TK').child(trackerId1).orderByChild("date").equalTo(String(dateSelected)).on("value", function(snapshot) {
            if (snapshot.exists()) {
                console.log(snapshot.val());

                snapshot.forEach((child) => {
                    if(child.val().lat!=0){
                        let latVal=child.val().lat;
                        let longVal=child.val().long;

                        console.log("Lat:"+latVal+" Long:"+longVal);
                        console.log("---------------------------------------------------------------");
                        historyLatArrayForCB.push(latVal);
                        historyLongArrayForCB.push(longVal);

                    }else{
                        //no data load to main map code
                        alert("Data not retrieved or no data.");
                    }

                });

                console.log("***************************************************");
                for (let j = 0; j < historyLatArrayForCB.length; j++)
                {
                    console.log("Long:"+historyLongArrayForCB[j]+" Lat:"+historyLatArrayForCB[j]);
                }
                console.log("***************************************************");
                console.log(historyLatArrayForCB.length+" is history array length");


                for (let i = 0; i < historyLatArrayForCB.length; i++)
                {
                    if(i==0)
                    {
                        locFrequency.push(1);
                        longArrayForCB.push(historyLongArrayForCB[i]);
                        latArrayForCB.push(historyLatArrayForCB[i]);
                    }
                    else
                    {
                        let found=0;
                        for(let j=0;j<locFrequency.length;j++)
                        {
                            if(historyLongArrayForCB[i]===longArrayForCB[j] && historyLatArrayForCB[i]===latArrayForCB[j])
                            {
                                locFrequency[j]++;
                                found=1;
                            }
                            if(j==(locFrequency.length-1) && found==0){
                                locFrequency.push(0);
                                longArrayForCB.push(historyLongArrayForCB[i]);
                                latArrayForCB.push(historyLatArrayForCB[i]);
                            }
                        }
                    }
                }


                let max_of_freq = Math.max.apply(Math, locFrequency);
                let min_of_freq = Math.min.apply(Math, locFrequency);
                let lastLat;
                let lastLong;
                console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                for (let j = 0; j < longArrayForCB.length; j++)
                {
                    console.log("Long:"+longArrayForCB[j]+" Lat:"+latArrayForCB[j]+" Frequency:"+locFrequency[j]);
                    let value = locFrequency[j];
                    let mappedValue = map(value, min_of_freq, max_of_freq, 0.5, 5);
                    console.log("mapped value:"+mappedValue);
                    heatMapArrayForCB[j]={location: new google.maps.LatLng(+latArrayForCB[j], longArrayForCB[j]), weight: mappedValue};
                    console.log(heatMapArrayForCB[j]);

                    lastLat=latArrayForCB[j];
                    lastLong=longArrayForCB[j];
                }
                console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

                //apply heat map

                let mapCenterLocationForCB = new google.maps.LatLng(lastLat, lastLong);

                let mapCB = new google.maps.Map(document.getElementById('cbMap'), {
                    center: mapCenterLocationForCB,
                    zoom: 18,
                    mapTypeId: 'satellite'
                });

                heatmapCB = new google.maps.visualization.HeatmapLayer({
                    data: heatMapArrayForCB
                });
                heatmapCB.set("gradient", heatmapCB.get("gradient") ? null : gradient);
                heatmapCB.set("radius", heatmapCB.get("radius") ? null : 25);
                heatmapCB.setMap(mapCB);


                firebase.database().ref().child('TK').child(trackerId2).orderByChild("date").equalTo(String(dateSelected)).on("value", function(snapshot) {
                    if (snapshot.exists()) {
                        console.log(snapshot.val());

                        snapshot.forEach((child) => {
                            if(child.val().lat!=0){
                            let latVal2=child.val().lat;
                            let longVal2=child.val().long;

                            console.log("Lat:"+latVal2+" Long:"+longVal2);
                            console.log("---------------------------------------------------------------");
                            historyLatArrayForCB2.push(latVal2);
                            historyLongArrayForCB2.push(longVal2);

                        }else{
                            //no data load to main map code
                            mapCP = new google.maps.Map(document.getElementById('cpMap'), {
                                center: { lat: 7.8731, lng: 80.7718 },
                                zoom: 8,
                                mapTypeId: 'satellite'
                            });

                            // heatmapCB.setMap(null);
                            // heatmapCB2.setMap(null);
                            console.log("data not retrieved or no data");
                            //code to load data back to main map comes here
                                alert("Data not retrieved or no data.");
                        }

                    });

                        console.log("***************************************************");
                        for (let jj = 0; jj < historyLatArrayForCB2.length; jj++)
                        {
                            console.log("Long:"+historyLongArrayForCB2[jj]+" Lat:"+historyLatArrayForCB2[jj]);
                        }
                        console.log("***************************************************");
                        console.log(historyLatArrayForCB2.length+" is history array length");


                        for (let ij = 0; ij < historyLatArrayForCB2.length; ij++)
                        {
                            if(ij==0)
                            {
                                locFrequency2.push(1);
                                longArrayForCB2.push(historyLongArrayForCB2[ij]);
                                latArrayForCB2.push(historyLatArrayForCB2[ij]);
                            }
                            else
                            {
                                let found2=0;
                                for(let ji=0;ji<locFrequency2.length;ji++)
                                {
                                    if(historyLongArrayForCB2[ij]===longArrayForCB2[ji] && historyLatArrayForCB2[ij]===latArrayForCB2[ji])
                                    {
                                        locFrequency2[ji]++;
                                        found2=1;
                                    }
                                    if(ji==(locFrequency2.length-1) && found2==0){
                                        locFrequency2.push(0);
                                        longArrayForCB2.push(historyLongArrayForCB2[ij]);
                                        latArrayForCB2.push(historyLatArrayForCB2[ij]);
                                    }
                                }
                            }
                        }


                        let max_of_freq2 = Math.max.apply(Math, locFrequency2);
                        let min_of_freq2 = Math.min.apply(Math, locFrequency2);
                        let lastLat2;
                        let lastLong2;
                        console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                        for (let ji = 0; ji < longArrayForCB2.length; ji++)
                        {
                            console.log("Long:"+longArrayForCB2[ji]+" Lat:"+latArrayForCB2[ji]+" Frequency:"+locFrequency2[ji]);
                            let value2 = locFrequency2[ji];
                            let mappedValue2 = map(value2, min_of_freq2, max_of_freq2, 0.5, 5);
                            console.log("mapped value:"+mappedValue2);
                            heatMapArrayForCB2[ji]={location: new google.maps.LatLng(+latArrayForCB2[ji], longArrayForCB2[ji]), weight: mappedValue2};
                            console.log(heatMapArrayForCB2[ji]);

                            lastLat=latArrayForCB2[ji];
                            lastLong=longArrayForCB2[ji];
                        }
                        console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");



                        heatmapCB2 = new google.maps.visualization.HeatmapLayer({
                            data: heatMapArrayForCB2
                        });

                        heatmapCB2.set("radius", heatmapCB2.get("radius") ? null : 25);
                        heatmapCB2.setMap(mapCB);

                    }
                    else{

                        console.log("data not retrieved or no data");
                        alert("Data not retrieved or no data.");
                        //code to load data back to main map comes here
                    }
                });
            }
            else{

                console.log("There's no proper data");
                alert("There's no proper data.");

                firebase.database().ref().child('TK').child(trackerId2).orderByChild("date").equalTo(String(dateSelected)).on("value", function(snapshot) {
                    if (snapshot.exists()) {
                        console.log(snapshot.val());

                        snapshot.forEach((child) => {
                            if(child.val().lat!=0){
                            let latVal2=child.val().lat;
                            let longVal2=child.val().long;

                            console.log("Lat:"+latVal2+" Long:"+longVal2);
                            console.log("---------------------------------------------------------------");
                            historyLatArrayForCB2.push(latVal2);
                            historyLongArrayForCB2.push(longVal2);

                        }else{
                            //no data load to main map code
                            mapCP = new google.maps.Map(document.getElementById('cpMap'), {
                                center: { lat: 7.8731, lng: 80.7718 },
                                zoom: 8,
                                mapTypeId: 'satellite'
                            });

                            // heatmapCB.setMap(null);
                            // heatmapCB2.setMap(null);
                            console.log("data not retrieved or no data");
                            //code to load data back to main map comes here
                        }

                    });

                        console.log("***************************************************");
                        for (let jj = 0; jj < historyLatArrayForCB2.length; jj++)
                        {
                            console.log("Long:"+historyLongArrayForCB2[jj]+" Lat:"+historyLatArrayForCB2[jj]);
                        }
                        console.log("***************************************************");
                        console.log(historyLatArrayForCB2.length+" is history array length");


                        for (let ij = 0; ij < historyLatArrayForCB2.length; ij++)
                        {
                            if(ij==0)
                            {
                                locFrequency2.push(1);
                                longArrayForCB2.push(historyLongArrayForCB2[ij]);
                                latArrayForCB2.push(historyLatArrayForCB2[ij]);
                            }
                            else
                            {
                                let found2=0;
                                for(let ji=0;ji<locFrequency2.length;ji++)
                                {
                                    if(historyLongArrayForCB2[ij]===longArrayForCB2[ji] && historyLatArrayForCB2[ij]===latArrayForCB2[ji])
                                    {
                                        locFrequency2[ji]++;
                                        found2=1;
                                    }
                                    if(ji==(locFrequency2.length-1) && found2==0){
                                        locFrequency2.push(0);
                                        longArrayForCB2.push(historyLongArrayForCB2[ij]);
                                        latArrayForCB2.push(historyLatArrayForCB2[ij]);
                                    }
                                }
                            }
                        }


                        let max_of_freq2 = Math.max.apply(Math, locFrequency2);
                        let min_of_freq2 = Math.min.apply(Math, locFrequency2);
                        let lastLat2;
                        let lastLong2;
                        console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                        for (let ji = 0; ji < longArrayForCB2.length; ji++)
                        {
                            console.log("Long:"+longArrayForCB2[ji]+" Lat:"+latArrayForCB2[ji]+" Frequency:"+locFrequency2[ji]);
                            let value2 = locFrequency2[ji];
                            let mappedValue2 = map(value2, min_of_freq2, max_of_freq2, 0.5, 5);
                            console.log("mapped value:"+mappedValue2);
                            heatMapArrayForCB2[ji]={location: new google.maps.LatLng(+latArrayForCB2[ji], longArrayForCB2[ji]), weight: mappedValue2};
                            console.log(heatMapArrayForCB2[ji]);

                            lastLat=latArrayForCB2[ji];
                            lastLong=longArrayForCB2[ji];
                        }
                        console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");


                        let mapCenterLocationForCB = new google.maps.LatLng(lastLat, lastLong);

                        let mapCB = new google.maps.Map(document.getElementById('cbMap'), {
                            center: mapCenterLocationForCB,
                            zoom: 18,
                            mapTypeId: 'satellite'
                        });

                        heatmapCB2 = new google.maps.visualization.HeatmapLayer({
                            data: heatMapArrayForCB2
                        });

                        heatmapCB2.set("radius", heatmapCB2.get("radius") ? null : 25);
                        heatmapCB2.setMap(mapCB);

                    }
                    else{

                        console.log("data not retrieved or no data");
                        //code to load data back to main map comes here
                        alert("Data not retrieved or no data.");
                    }
                });

            }
        });


    }

    window.processConsumption=function(){

        var dateSelected = document.getElementById('selectdate2').value;
        console.log(String(dateSelected));
        var animal = document.getElementById('select_consumer').value;
        console.log(String(animal));
        var trackerId;
        if(animal=="Terrestial Tracker 1")
            trackerId="TKT1";
        else if(animal=="Terrestial Tracker 2")
            trackerId="TKT2";
        else if(animal=="Marine Tracker")
            trackerId="TKM1";
        else if(animal=="Aerial Tracker")
            trackerId="TKA1";

        console.log(trackerId);
        var splt= dateSelected.split(":");
        var year=splt[0];
        var month= splt[1];
        var day=splt[2];

        var historyLongArrayForCP=[];
        var historyLatArrayForCP=[];
        var longArrayForCP=[];
        var latArrayForCP=[];
        var locFrequencyCP=[];
        var heatMapArrayForCP=[];
        var mapCP;
        var heatmapCP;


        if(month<10){
            month=month.split("0");
            month=month[1];
        }

        if(day<10){
            day=day.split("0");
            day=day[1];
        }

        dateSelected=year+":"+month+":"+day;
        console.log(dateSelected);

        firebase.database().ref().child('TK').child(trackerId).orderByChild("date").equalTo(String(dateSelected)).on("value", function(snapshot) {
            if (snapshot.exists()) {
                console.log(snapshot.val());
                var data= snapshot.val();
                snapshot.forEach((child) => {
                    if(child.val().lat!=0 && child.val().consumption!=0){
                    let latVal=child.val().lat;
                    let longVal=child.val().long;

                    console.log("Lat:"+latVal+" Long:"+longVal);
                    console.log("---------------------------------------------------------------");
                    historyLatArrayForCP.push(latVal);
                    historyLongArrayForCP.push(longVal);
                }
                if(historyLatArrayForCP.length==0){
                    mapCP = new google.maps.Map(document.getElementById('cpMap'), {
                        center: { lat: 7.8731, lng: 80.7718 },
                        zoom: 8,
                        mapTypeId: 'satellite'
                    });

                    heatmapCP.setMap(null);
                    console.log("There's no proper data");
                    alert("There's no proper data.");
                }
            });

                console.log("***************************************************");
                for (let j = 0; j < historyLatArrayForCP.length; j++)
                {
                    console.log("Long:"+historyLongArrayForCP[j]+" Lat:"+historyLatArrayForCP[j]);
                }
                console.log("***************************************************");
                console.log(historyLatArrayForCP.length+" is history array length");


                for (let i = 0; i < historyLatArrayForCP.length; i++)
                {
                    if(i==0)
                    {
                        locFrequencyCP.push(1);
                        longArrayForCP.push(historyLongArrayForCP[i]);
                        latArrayForCP.push(historyLatArrayForCP[i]);
                    }
                    else
                    {
                        let found=0;
                        for(let j=0;j<locFrequencyCP.length;j++)
                        {
                            if(historyLongArrayForCP[i]===longArrayForCP[j] && historyLatArrayForCP[i]===latArrayForCP[j])
                            {
                                locFrequencyCP[j]++;
                                found=1;
                            }
                            if(j==(locFrequencyCP.length-1) && found==0){
                                locFrequencyCP.push(0);
                                longArrayForCP.push(historyLongArrayForCP[i]);
                                latArrayForCP.push(historyLatArrayForCP[i]);
                            }
                        }
                    }
                }

                let max_of_freq = Math.max.apply(Math, locFrequencyCP);
                let min_of_freq = Math.min.apply(Math, locFrequencyCP);
                let lastLat;
                let lastLong;
                console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                for (let j = 0; j < longArrayForCP.length; j++)
                {
                    console.log("Long:"+longArrayForCP[j]+" Lat:"+latArrayForCP[j]+" Frequency:"+locFrequencyCP[j]);
                    let value = locFrequencyCP[j];
                    let mappedValue = map(value, min_of_freq, max_of_freq, 0.5, 5);
                    console.log("mapped value:"+mappedValue);
                    heatMapArrayForCP[j]={location: new google.maps.LatLng(+latArrayForCP[j], longArrayForCP[j]), weight: mappedValue};
                    console.log(heatMapArrayForCP[j]);

                    lastLat=latArrayForCP[j];
                    lastLong=longArrayForCP[j];
                }
                console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

                let mapCenterLocationForCP = new google.maps.LatLng(lastLat, lastLong);

                mapCP = new google.maps.Map(document.getElementById('cpMap'), {
                    center: mapCenterLocationForCP,
                    zoom: 18,
                    mapTypeId: 'satellite'
                });

                heatmapCP = new google.maps.visualization.HeatmapLayer({
                    data: heatMapArrayForCP
                });

                heatmapCP.set("radius", heatmapCP.get("radius") ? null : 25);
                heatmapCP.setMap(mapCP);

            }
            else{
                mapCP = new google.maps.Map(document.getElementById('cpMap'), {
                    center: { lat: 7.8731, lng: 80.7718 },
                    zoom: 8,
                    mapTypeId: 'satellite'
                });

                heatmapCP.setMap(null);
                console.log("data not retrieved or no data");
                alert("Data not retrieved or no data!");
            }


        });

    }

    function map( x,  in_min,  in_max,  out_min,  out_max){
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    }


</script>

<script async
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB8BbO_t_LXJLuBuHLnRMvXBJH8_S7q2IM&libraries=visualization&callback=initMap">
</script>






<script>

    $( document ).ready(function() {

        let dateCB = flatpickr(document.getElementById('selectdate1'), {
            dateFormat: "Y:m:d"
        });
        let dateCP = flatpickr(document.getElementById('selectdate2'), {
            dateFormat: "Y:m:d"
        });

        let dateRS = flatpickr(document.getElementById('selectdate3'), {
            dateFormat: "Y:m:d"
        });

        let dateWS = flatpickr(document.getElementById('selectdate4'), {
            dateFormat: "Y:m:d"
        });

        //compare animal behavior
        $("#selectdate1").change(function changeSession1() {
            var animal1 = document.getElementById('select_cb_1').value;
            var animal2 = document.getElementById('select_cb_2').value;
            if(animal1==animal2){
                alert("Select a different tracker to compare.");
            }
            else
                processBehavior();
        });

        $("#select_cb_1").change(function changeSession2() {
            processBehavior();
        });

        //animal consumption
        $("#selectdate2").change(function changeSession3() {
            processConsumption();
        });

        $("#select_consumer").change(function changeSession4() {
            processConsumption();
        });

        $("#selectdate3").change(function() {
            createRSChartData(this.value, $('#cmbRSParameters').find(":selected").val(), $('#cmbRSDevice').find(":selected").val())
        });

        $("#cmbRSParameters").change(function() {
            createRSChartData($('#selectdate3').val(), this.value, $('#cmbRSDevice').find(":selected").val())
        });

        $("#cmbRSDevice").change(function() {
            createRSChartData($('#selectdate3').val(), $('#cmbRSParameters').find(":selected").val(), this.value)
        });


        $("#selectdate4").change(function() {
            createWSChartData(this.value, $('#cmbWSParameters').find(":selected").val(), $('#cmbWSDevice').find(":selected").val())
        });

        $("#cmbWSParameters").change(function() {
            createWSChartData($('#selectdate4').val(), this.value, $('#cmbWSDevice').find(":selected").val())
        });

        $("#cmbWSDevice").change(function() {
            createWSChartData($('#selectdate4').val(), $('#cmbWSParameters').find(":selected").val(), this.value)
        });



    });
</script>